helm upgrade --install nginx ingress-nginx/ingress-nginx --namespace otus -f ./nginx_ingress.yaml

kubectl create secret generic postgresql-db-pass --from-literal=password='vdOX2We5DCSpeGo9' --from-literal=postgres-password='xcNftqO2Q2THMv6C'

helm install postgresql oci://registry-1.docker.io/bitnamicharts/postgresql -f postgresql-values.yaml

helm upgrade --install backend-app ./backend-app

minikube tunnel

newman run otus_user_pm_collection.json

Postgres exporter:
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
helm install postgres-exporter prometheus-community/prometheus-postgres-exporter -f values.yaml

Creating PostgreSQL user for monitoring:
winpty kubectl exec -it postgresql-0 -- bash
psql postgresql://localhost:5432/backend-app -U postgres
>> create user prom_monitor with password 'monitor-password';
>> grant pg_monitor to prom_monitor;

Grafana:
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
helm install prom-stack prometheus-community/kube-prometheus-stack -f prom/prometheus.yaml

kubectl port-forward svc/prom-stack-grafana 9000:80

Metrics:
1. Latency (with Percentiles)
histogram_quantile(0.5, sum by(le, pod) (irate(http_server_requests_seconds_bucket{uri=~"/user/.*",method="GET"}[1m])))
histogram_quantile(0.95, sum by(le, pod) (irate(http_server_requests_seconds_bucket{uri=~"/user/.*",method="GET"}[1m])))
histogram_quantile(0.99, sum by(le, pod) (irate(http_server_requests_seconds_bucket{uri=~"/user/.*",method="GET"}[1m])))
histogram_quantile(1, sum by(le, pod) (irate(http_server_requests_seconds_bucket{uri=~"/user/.*",method="GET"}[1m])))

2. RPS
sum by(pod) (irate(http_server_requests_seconds_count{container="backend-app", uri=~"/user/.*", method="GET"}[1m]))

3. Error rate
sum by(pod) (irate(http_server_requests_seconds_count{container="backend-app", uri=~"/user/.*", status=~"5.."}[1m]))


Ingress:
1. Latency
histogram_quantile(0.5, sum by(le, pod) (irate(nginx_ingress_controller_request_duration_seconds_bucket{host="arch.homework", ingress="backend-app"}[1m])))
histogram_quantile(0.95, sum by(le, pod) (irate(nginx_ingress_controller_request_duration_seconds_bucket{host="arch.homework", ingress="backend-app"}[1m])))
histogram_quantile(0.99, sum by(le, pod) (irate(nginx_ingress_controller_request_duration_seconds_bucket{host="arch.homework", ingress="backend-app"}[1m])))
histogram_quantile(1, sum by(le, pod) (irate(nginx_ingress_controller_request_duration_seconds_bucket{host="arch.homework", ingress="backend-app"}[1m])))

2. RPS
irate(nginx_ingress_controller_requests{host="arch.homework", ingress="backend-app"}[1m])

3. Error rate
sum by(pod) (irate(nginx_ingress_controller_requests{host="arch.homework", ingress="backend-app", status=~"5.."}[1m]))


Stress test:
1. GET
#!/bin/bash

for (( ; ; ))
do
  ab -n 10 -c 1 -m GET http://arch.homework/user/1
done

2. POST
#!/bin/bash

for (( ; ; ))
do
  ab -n 3 -c 1 -T application/json -p post.json http://arch.homework/user
done

post.json:
{
    "username": "test",
    "firstName": "Ivan",
    "lastName": "Ivanov",
    "email": "ivanov@mail.ru",
    "phone": "88889994433"
}

3. PUT
#!/bin/bash

for (( ; ; ))
do
  ab -n 4 -c 1 -T application/json -u put.json http://arch.homework/user/3
done

put.json:
{
    "username": "test2222",
    "firstName": "Ivan",
    "lastName": "Ivanov",
    "email": "ivanov@mail.ru",
    "phone": "88889994433"
}

4. DELETE
#!/bin/bash

for (( ; ; ))
do
  ab -n 5 -c 1 -m DELETE http://arch.homework/user/1
done
